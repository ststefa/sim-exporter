# Default values for sim-exporter.

image:
  repository: artifactory.intern.gec.io/docker/sim-exporter
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  #tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

# Creates a configmap of this dict. Each entry consists of key and value. The key is used as a config filename which can be referenced by .Values.activeConfig. The value is a complete and valid simulator config.
configs:
  outofthebox.yaml: |-
    version: v1
    metrics:
    - name: sim_asc
      type: gauge
      items:
      - min: 10
        max: 100
        func: asc
        interval: 5m
    - name: sim_rand
      type: gauge
      items:
      - min: 10
        max: 100
        func: rand
        interval: 5m
    - name: sim_sin
      type: gauge
      items:
      - min: 10
        max: 100
        func: sin
        interval: 5m
    - name: sim_count
      type: counter
      items:
      - min: 10
        max: 100
        func: rand
        interval: 1m

# Specify item from .Values.configFiles that will be served
activeConfig: outofthebox.yaml

# Interval in which the values are refreshed
refreshTime: 15s

serviceAccount:
  create: true
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext:
  fsGroup: 1000

securityContext:
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

service:
  type: ClusterIP
  port: 8080

ingress:
  enabled: false
  className: ""
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# In case you use Prometheus Operator you can create a monitoring.coreos.com ServiceMonitor to automate the scraping setup. The scraping interval will be set to .Values.refreshTime
serviceMonitor:
  enabled: false

resources:
  limits:
    cpu: 100m
    memory: 48Mi
  requests:
    cpu: 10m
    memory: 24Mi

nodeSelector: {}

tolerations: []

affinity: {}
